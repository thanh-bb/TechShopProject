// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechShop.API.Data;

#nullable disable

namespace TechShop.API.Migrations
{
    [DbContext(typeof(TechShopDbContext))]
    [Migration("20231126160404_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TechShop.API.Entities.ChiTietDonHang", b =>
                {
                    b.Property<int?>("MaDH")
                        .HasColumnType("int");

                    b.Property<int?>("MaSP")
                        .HasColumnType("int");

                    b.Property<long>("GiaBan")
                        .HasColumnType("bigint");

                    b.HasKey("MaDH", "MaSP");

                    b.HasIndex("MaSP");

                    b.ToTable("ChiTietDonHang");
                });

            modelBuilder.Entity("TechShop.API.Entities.ChiTietGioHang", b =>
                {
                    b.Property<int>("Id_CTCart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_CTCart"));

                    b.Property<long>("GiaBan")
                        .HasColumnType("bigint");

                    b.Property<int>("ID_Cart")
                        .HasColumnType("int");

                    b.Property<int>("MaSP")
                        .HasColumnType("int");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.HasKey("Id_CTCart");

                    b.HasIndex("ID_Cart");

                    b.HasIndex("MaSP");

                    b.ToTable("ChiTietGioHang");
                });

            modelBuilder.Entity("TechShop.API.Entities.DonHang", b =>
                {
                    b.Property<int>("MaDH")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaDH"));

                    b.Property<Guid?>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MaTT")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgayDat")
                        .HasColumnType("datetime2");

                    b.Property<long>("TongTien")
                        .HasColumnType("bigint");

                    b.HasKey("MaDH");

                    b.HasIndex("Id");

                    b.HasIndex("MaTT");

                    b.ToTable("DonHang");
                });

            modelBuilder.Entity("TechShop.API.Entities.GioHang", b =>
                {
                    b.Property<int>("ID_Cart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Cart"));

                    b.Property<Guid?>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Cart");

                    b.HasIndex("Id");

                    b.ToTable("GioHang");
                });

            modelBuilder.Entity("TechShop.API.Entities.KhachHang", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DienThoai")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenKH")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7cb68b71-fcb2-40a8-9fb7-ce1ea4cf0873"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ed6a3d1-831e-4c65-8527-0f4df8820a3f",
                            DienThoai = "0985879105",
                            Email = "abc@gmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            NgaySinh = new DateTime(2023, 11, 26, 23, 4, 3, 877, DateTimeKind.Local).AddTicks(7348),
                            NormalizedEmail = "ADMIN1@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "123456",
                            PhoneNumber = "032132131",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9849e406-0cc6-4f99-8b05-628e15c7c3ed",
                            TenKH = "Trần Văn Man",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("45508e2e-a0e0-45b8-bd0b-e791fb38b39e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d20e6ea-95d2-48d2-8dbf-eb79d919e845",
                            DienThoai = "0985879105",
                            Email = "abc@gmail.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            NgaySinh = new DateTime(2023, 11, 26, 23, 4, 3, 877, DateTimeKind.Local).AddTicks(7416),
                            NormalizedEmail = "ADMIN1@GMAIL.COM",
                            NormalizedUserName = "monmon",
                            PasswordHash = "123456",
                            PhoneNumber = "032132131",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b792b47-a59c-42f4-962b-68259b30c18b",
                            TenKH = "Trần Văn Mon",
                            TwoFactorEnabled = false,
                            UserName = "monmon"
                        });
                });

            modelBuilder.Entity("TechShop.API.Entities.LoaiSP", b =>
                {
                    b.Property<string>("MaLoai")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenLoai")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaLoai");

                    b.ToTable("LoaiSP");

                    b.HasData(
                        new
                        {
                            MaLoai = "01",
                            ImageURL = "./assets/img/categories/Laptop.png",
                            TenLoai = "Laptop"
                        },
                        new
                        {
                            MaLoai = "02",
                            ImageURL = "./assets/img/categories/Phone.png",
                            TenLoai = "Điện thoại"
                        },
                        new
                        {
                            MaLoai = "03",
                            ImageURL = "./assets/img/categories/Keyboard.png",
                            TenLoai = "Bàn phím"
                        },
                        new
                        {
                            MaLoai = "04",
                            ImageURL = "./assets/img/categories/Chuot.png",
                            TenLoai = "Chuột"
                        },
                        new
                        {
                            MaLoai = "05",
                            ImageURL = "./assets/img/categories/HeadPhone.png",
                            TenLoai = "Tai nghe"
                        });
                });

            modelBuilder.Entity("TechShop.API.Entities.QuanTriVien", b =>
                {
                    b.Property<int>("MaQTV")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaQTV"));

                    b.Property<string>("DiaChiQTV")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DienThoaiQTV")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("EmailQTV")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HashPasswdQTV")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenQTV")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaQTV");

                    b.HasIndex("Id");

                    b.ToTable("NhanVien");
                });

            modelBuilder.Entity("TechShop.API.Entities.Quyen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e6643b9-5537-428e-b8ae-1cd6d93cf855"),
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("TechShop.API.Entities.SanPham", b =>
                {
                    b.Property<int>("MaSP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaSP"));

                    b.Property<long>("GiaSP")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaLoai")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MaTT_Duyet")
                        .HasColumnType("int");

                    b.Property<string>("MoTa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NgayDang")
                        .HasColumnType("datetime2");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenSP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaSP");

                    b.HasIndex("Id");

                    b.HasIndex("MaLoai");

                    b.HasIndex("MaTT_Duyet");

                    b.ToTable("SanPham");
                });

            modelBuilder.Entity("TechShop.API.Entities.TrangThaiDH", b =>
                {
                    b.Property<int>("MaTT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaTT"));

                    b.Property<string>("TenTT")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaTT");

                    b.ToTable("TrangThaiDH");
                });

            modelBuilder.Entity("TechShop.API.Entities.TrangThaiDuyet", b =>
                {
                    b.Property<int>("MaTT_Duyet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaTT_Duyet"));

                    b.Property<string>("TenTT_Duyet")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaTT_Duyet");

                    b.ToTable("TrangThaiDuyet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TechShop.API.Entities.Quyen", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TechShop.API.Entities.KhachHang", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TechShop.API.Entities.KhachHang", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TechShop.API.Entities.Quyen", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechShop.API.Entities.KhachHang", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TechShop.API.Entities.KhachHang", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechShop.API.Entities.ChiTietDonHang", b =>
                {
                    b.HasOne("TechShop.API.Entities.DonHang", "DonHang")
                        .WithMany()
                        .HasForeignKey("MaDH")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechShop.API.Entities.SanPham", "SanPham")
                        .WithMany()
                        .HasForeignKey("MaSP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DonHang");

                    b.Navigation("SanPham");
                });

            modelBuilder.Entity("TechShop.API.Entities.ChiTietGioHang", b =>
                {
                    b.HasOne("TechShop.API.Entities.GioHang", "GioHang")
                        .WithMany()
                        .HasForeignKey("ID_Cart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechShop.API.Entities.SanPham", "SanPham")
                        .WithMany()
                        .HasForeignKey("MaSP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GioHang");

                    b.Navigation("SanPham");
                });

            modelBuilder.Entity("TechShop.API.Entities.DonHang", b =>
                {
                    b.HasOne("TechShop.API.Entities.KhachHang", "KhachHang")
                        .WithMany("DonHangs")
                        .HasForeignKey("Id");

                    b.HasOne("TechShop.API.Entities.TrangThaiDH", "TrangThaiDH")
                        .WithMany("HoaDons")
                        .HasForeignKey("MaTT");

                    b.Navigation("KhachHang");

                    b.Navigation("TrangThaiDH");
                });

            modelBuilder.Entity("TechShop.API.Entities.GioHang", b =>
                {
                    b.HasOne("TechShop.API.Entities.KhachHang", "KhachHang")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("KhachHang");
                });

            modelBuilder.Entity("TechShop.API.Entities.QuanTriVien", b =>
                {
                    b.HasOne("TechShop.API.Entities.Quyen", "Quyen")
                        .WithMany("NhanViens")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quyen");
                });

            modelBuilder.Entity("TechShop.API.Entities.SanPham", b =>
                {
                    b.HasOne("TechShop.API.Entities.KhachHang", "KhachHang")
                        .WithMany("SanPhams")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechShop.API.Entities.LoaiSP", "LoaiSP")
                        .WithMany("SanPhams")
                        .HasForeignKey("MaLoai");

                    b.HasOne("TechShop.API.Entities.TrangThaiDuyet", "TrangThaiDuyet")
                        .WithMany("SanPhams")
                        .HasForeignKey("MaTT_Duyet");

                    b.Navigation("KhachHang");

                    b.Navigation("LoaiSP");

                    b.Navigation("TrangThaiDuyet");
                });

            modelBuilder.Entity("TechShop.API.Entities.KhachHang", b =>
                {
                    b.Navigation("DonHangs");

                    b.Navigation("SanPhams");
                });

            modelBuilder.Entity("TechShop.API.Entities.LoaiSP", b =>
                {
                    b.Navigation("SanPhams");
                });

            modelBuilder.Entity("TechShop.API.Entities.Quyen", b =>
                {
                    b.Navigation("NhanViens");
                });

            modelBuilder.Entity("TechShop.API.Entities.TrangThaiDH", b =>
                {
                    b.Navigation("HoaDons");
                });

            modelBuilder.Entity("TechShop.API.Entities.TrangThaiDuyet", b =>
                {
                    b.Navigation("SanPhams");
                });
#pragma warning restore 612, 618
        }
    }
}
