@page "/update/{MaSP:int}"

@using Microsoft.AspNetCore.Components.Authorization;
@using TechShop.Models.Dtos;
@using TechShop.Web.Services.Contracts
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.AspNetCore.Http;
@using TechShop.Models.Enums;


@inject NavigationManager NavigationManager
@inject ICategoryService CategoryService
@inject IProductService ProductService
@inject IUserService UserService
@inject IToastService ToastService

<link rel="shortcut icon" type="image/png" href="./assets/img/favicon.png">
<!-- google font -->
<link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,700" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
<!-- fontawesome -->
<link rel="stylesheet" href="./assets/css/all.min.css">
<!-- bootstrap -->
<link rel="stylesheet" href="./assets/bootstrap/css/bootstrap.min.css">
<!-- owl carousel -->
<link rel="stylesheet" href="./assets/css/owl.carousel.css">
<!-- magnific popup -->
<link rel="stylesheet" href="./assets/css/magnific-popup.css">
<!-- animate css -->
<link rel="stylesheet" href="./assets/css/animate.css">
<!-- mean menu css -->
<link rel="stylesheet" href="./assets/css/meanmenu.min.css">
<!-- main style -->
<link rel="stylesheet" href="./assets/css/main.css">
<!-- responsive -->
<link rel="stylesheet" href="./assets/css/responsive.css">

<link rel="stylesheet" href="./assets/css/style.css">

<link rel="stylesheet" type="text/css" href="./login/css/main.css" />
<link rel="stylesheet" type="text/css" href="./login/css/util.css" />
<link rel="stylesheet" type="text/css" href="./login/css/style.css" />

@if (productUp == null)
{
    <DisplaySpinner />
}

else
{
    <div class="limiter">
        <div class="container-login" style="background-image: url('');">

            <div class="card card-5 m-t-100">
                <div class="card-heading">
                    <h2 class="title">Update</h2>
                </div>
                <div class="card-body">
                    <form method="POST">
                        <EditForm Model="@productUp" OnValidSubmit="SubmitProduct">
                            <DataAnnotationsValidator />
                  

                            <div class="form-row">
                                <div class="name">Tên sản phẩm</div>
                                <div class="value">
                                    <div class="input-group">
                                        <InputText id="name" class="form-control" @bind-Value="productUp.TenSP"></InputText>
                                        <ValidationMessage For="()=>productUp.TenSP"></ValidationMessage>
                                    </div>
                                </div>
                            </div>


                            <div class="form-group">
                                <label for="status">Trạng thái</label>
                                <InputSelect id="status" class="form-control" @bind-Value="productUp.Status">
                                    <option>Chọn tình trạng hàng</option>
                                    @foreach (string item in Enum.GetNames(typeof(Status)))
                                    {
                                        <option value="@item">@item</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="()=>productUp.Status"></ValidationMessage>
                            </div>
                            

                            <div class="d-flex justify-content-center">
                                <button type="submit" class="btn btn--radius-2 btn--red">Submit</button>

                            </div>

                        </EditForm>
                    </form>


                </div>
            </div>
        </div>
        

    </div>


}

@code {

    [Parameter]
    public int MaSP { set; get; }

    private ProductUpdate productUp;

    private List<LoaiDto> Loais;

    protected override async Task OnInitializedAsync()
    {
        Loais = await CategoryService.GetAll();
        var productDto = await ProductService.GetProductDetail(MaSP);
        productUp = new ProductUpdate();
        productUp.TenSP = productDto.TenSP;
        productUp.Status = productDto.Status;
    }


    private async Task SubmitProduct(EditContext context)
    {

        var result = await ProductService.UpdateProduct(MaSP, productUp);
        if (result)
        {
            ToastService.ShowSuccess($"{productUp.TenSP} has been updated successfully.");
            NavigationManager.NavigateTo("/profile");
        }
        else
        {
            ToastService.ShowError($"An error occurred in progress. Please contact to administrator.");
        }
    }
   

}


